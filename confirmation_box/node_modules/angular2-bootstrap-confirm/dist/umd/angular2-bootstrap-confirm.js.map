{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 9d09e6be5c0b91bab832","webpack:///external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}","webpack:///./src/confirmOptions.provider.ts","webpack:///./src/confirmPopover.component.ts","webpack:///./src/confirm.directive.ts","webpack:///./src/focus.directive.ts","webpack:///./src/position.provider.ts","webpack:///./src/confirm.module.ts","webpack:///external {\"root\":[\"ng\",\"common\"],\"commonjs\":\"@angular/common\",\"commonjs2\":\"@angular/common\",\"amd\":\"@angular/common\"}","webpack:///external {\"root\":[\"ng\",\"platformBrowser\"],\"commonjs\":\"@angular/platform-browser\",\"commonjs2\":\"@angular/platform-browser\",\"amd\":\"@angular/platform-browser\"}","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"angular2-bootstrap-confirm.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/common\"), require(\"@angular/core\"), require(\"@angular/platform-browser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/common\", \"@angular/core\", \"@angular/platform-browser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng2BootstrapConfirm\"] = factory(require(\"@angular/common\"), require(\"@angular/core\"), require(\"@angular/platform-browser\"));\n\telse\n\t\troot[\"ng2BootstrapConfirm\"] = factory(root[\"ng\"][\"common\"], root[\"ng\"][\"core\"], root[\"ng\"][\"platformBrowser\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_8__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9d09e6be5c0b91bab832","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}\n// module id = 0\n// module chunks = 0","import {Injectable, TemplateRef} from '@angular/core';\n\n/**\n * Use this for configuring the confirmation popover defaults\n *\n * Use it like so:\n * ```\n * const options: ConfirmOptions = new ConfirmOptions();\n * // focus the confirm button by default. See below for an explanation of all options.\n * options.focusButton = 'confirm';\n *\n * providers: [{provide: ConfirmOptions, useValue: options}]\n * ```\n */\n@Injectable()\nexport class ConfirmOptions {\n\n  /**\n   * The popover title\n   */\n  public title: string;\n\n  /**\n   * The popover message\n   */\n  public message: string;\n\n  /**\n   * The popover confirmation button text\n   */\n  public confirmText: string = 'Confirm';\n\n  /**\n   * The popover cancel button text\n   */\n  public cancelText: string = 'Cancel';\n\n  /**\n   * The popover confirm button type e.g. `success`, `danger` etc\n   */\n  public confirmButtonType: string = 'success';\n\n  /**\n   * The popover cancel button type  e.g. `success`, `danger` etc\n   */\n  public cancelButtonType: string = 'default';\n\n  /**\n   * The popover placement. Can be `top`, `bottom`, `left`, `right`\n   */\n  public placement: string = 'top';\n\n  /**\n   * Which button to cancel. Can be either `confirm` or `cancel`\n   */\n  public focusButton: string;\n\n  /**\n   * Whether to hide the confirmation button\n   */\n  public hideConfirmButton: boolean = false;\n\n  /**\n   * Whether to hide the cancel button\n   */\n  public hideCancelButton: boolean = false;\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n  public popoverClass: string = '';\n\n  /**\n   * Whether to append the popover to the document body\n   */\n  public appendToBody: boolean = false;\n\n}\n\n/**\n * @private\n */\n@Injectable()\nexport class PopoverConfirmOptions extends ConfirmOptions {\n\n  public onConfirm: Function;\n  public onCancel: Function;\n  public onAfterViewInit: Function;\n  public customTemplate: TemplateRef<any>;\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/confirmOptions.provider.ts","import {\n  Component,\n  AfterViewInit,\n} from '@angular/core';\nimport {PopoverConfirmOptions} from './confirmOptions.provider';\n\n/**\n * @private\n */\n@Component({\n  styles: [`\n    .popover {\n      display: block;\n    }\n  `],\n  template: `\n    <template #defaultTemplate let-options=\"options\">\n      <div [class]=\"'popover ' + options.placement + ' popover-' + options.placement + ' ' + options.popoverClass\">\n        <div class=\"popover-arrow arrow\"></div>\n        <h3 class=\"popover-title\" [innerHTML]=\"options.title\"></h3>\n        <div class=\"popover-content\">\n          <p [innerHTML]=\"options.message\"></p>\n          <div class=\"row\">\n            <div\n              class=\"col-xs-6\"\n              [class.col-xs-offset-3]=\"options.hideCancelButton\"\n              *ngIf=\"!options.hideConfirmButton\">\n              <button\n                [mwlFocus]=\"options.focusButton === 'confirm'\"\n                [class]=\"'btn btn-block btn-' + options.confirmButtonType\"\n                (click)=\"options.onConfirm()\"\n                [innerHtml]=\"options.confirmText\">\n              </button>\n            </div>\n            <div\n              class=\"col-xs-6\"\n              [class.col-xs-offset-3]=\"options.hideConfirmButton\"\n              *ngIf=\"!options.hideCancelButton\">\n              <button\n                [mwlFocus]=\"options.focusButton === 'cancel'\"\n                [class]=\"'btn btn-block btn-' + options.cancelButtonType\"\n                (click)=\"options.onCancel()\"\n                [innerHtml]=\"options.cancelText\">\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </template>\n    <template\n      [ngTemplateOutlet]=\"options.customTemplate || defaultTemplate\"\n      [ngOutletContext]=\"{options: options}\">\n    </template>\n  `\n})\nexport class ConfirmPopover implements AfterViewInit {\n\n  constructor(public options: PopoverConfirmOptions) {}\n\n  ngAfterViewInit(): void {\n    this.options.onAfterViewInit();\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/confirmPopover.component.ts","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  ComponentRef,\n  OnDestroy,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  ReflectiveInjector,\n  ResolvedReflectiveProvider,\n  ComponentFactoryResolver,\n  Injector,\n  Inject,\n  Renderer,\n  TemplateRef,\n  ComponentFactory\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {ConfirmPopover} from './confirmPopover.component';\nimport {ConfirmOptions, PopoverConfirmOptions} from './confirmOptions.provider';\nimport {Position} from './position.provider';\n\n/**\n * @private\n */\ninterface Coords {\n  top: number;\n  left: number;\n}\n\n/**\n * All properties can be set on the directive as attributes like so (use the `ConfirmOptions` provider to configure them globally):\n * ```\n * <button\n *  class=\"btn btn-default\"\n *  mwlConfirm\n *  [title]=\"title\"\n *  [message]=\"message\"\n *  placement=\"left\"\n *  (confirm)=\"confirmClicked = true\"\n *  (cancel)=\"cancelClicked = true\"\n *  [(isOpen)]=\"isOpen\">\n *   Show confirm popover!\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlConfirm]'\n})\nexport class Confirm implements OnDestroy, OnChanges, OnInit {\n\n  /**\n   * The title of the popover.\n   * Note, if you use an expression, you may want to consider using \"data-title\" instead of \"title\" so\n   * that the browser doesn't show native tooltips with the angular expression listed.\n   */\n  @Input() title: string;\n\n  /**\n   * The body text of the popover.\n   */\n  @Input() message: string;\n\n  /**\n   * The text of the confirm button. Default `Confirm`\n   */\n  @Input() confirmText: string;\n\n  /**\n   * The text of the cancel button. Default `Cancel`\n   */\n  @Input() cancelText: string;\n\n  /**\n   * The placement of the popover. It can be either `top`, `right`, `bottom` or `left`. Default `top`\n   */\n  @Input() placement: string;\n\n  /**\n   * The bootstrap button type of the confirm button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `success`\n   */\n  @Input() confirmButtonType: string;\n\n  /**\n   * The bootstrap button type of the cancel button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `default`\n   */\n  @Input() cancelButtonType: string;\n\n  /**\n   * Set to either `confirm` or `cancel` to focus the confirm or cancel button.\n   * If omitted, by default it will not focus either button.\n   */\n  @Input() focusButton: string;\n\n  /**\n   * Whether to hide the confirm button. Default `false`.\n   */\n  @Input() hideConfirmButton: boolean = false;\n\n  /**\n   * Whether to hide the cancel button. Default `false`.\n   */\n  @Input() hideCancelButton: boolean = false;\n\n  /**\n   * Whether to disable showing the popover. Default `false`.\n   */\n  @Input() isDisabled: boolean = false;\n\n  /**\n   * Will open or show the popover when changed.\n   * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n   */\n  @Input() isOpen: boolean = false;\n\n  /**\n   * A reference to a <template> tag that if set will override the popovers template. Use like so:\n   * <template #customTemplate let-options=\"options\">\n   *   <div [class]=\"'popover ' + options.placement\" style=\"display: block\">\n   *     My custom template\n   *   </div>\n   * </template>\n   *\n   * Then pass customTemplate to the mwlConfirm directive like so `[customTemplate]=\"customTemplate\"`\n   */\n  @Input() customTemplate: TemplateRef<any>;\n\n  /**\n   * Will emit when the popover is opened or closed\n   */\n  @Output() isOpenChange: EventEmitter<any> = new EventEmitter(true);\n\n  /**\n   * An expression that is called when the confirm button is clicked.\n   */\n  @Output() confirm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * An expression that is called when the cancel button is clicked.\n   */\n  @Output() cancel: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n  @Input() popoverClass: string;\n\n  /**\n   * Append the element to the document body rather than the trigger element\n   */\n  @Input() appendToBody: boolean = false;\n\n  /**\n   * @private\n   */\n  popover: ComponentRef<ConfirmPopover> = null;\n\n  /**\n   * @private\n   */\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private elm: ElementRef,\n    private defaultOptions: ConfirmOptions,\n    private cfr: ComponentFactoryResolver,\n    private position: Position,\n    private renderer: Renderer,\n    @Inject(DOCUMENT) private document //tslint:disable-line\n  ) {}\n\n  /**\n   * @private\n   */\n  ngOnInit(): void {\n    this.isOpenChange.emit(false);\n  }\n\n  /**\n   * @private\n   */\n  ngOnChanges(changes: any): void {\n    if (changes.isOpen) {\n      if (changes.isOpen.currentValue === true) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  ngOnDestroy(): void {\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  onConfirm(): void {\n    this.confirm.emit(null);\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  onCancel(): void {\n    this.cancel.emit(null);\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  @HostListener('document:click', ['$event.target'])\n  @HostListener('document:touchend', ['$event.target'])\n  onDocumentClick(target: HTMLElement): void {\n\n    if (this.popover && !this.elm.nativeElement.contains(target) && !this.popover.location.nativeElement.contains(target)) {\n      this.hidePopover();\n    }\n  }\n\n  /**\n   * @private\n   */\n  @HostListener('click')\n  togglePopover(): void {\n    if (!this.popover) {\n      this.showPopover();\n    } else {\n      this.hidePopover();\n    }\n  }\n\n  /**\n   * @private\n   */\n  @HostListener('window:resize')\n  onResize(): void {\n    this.positionPopover();\n  }\n\n  private showPopover(): void {\n    if (!this.popover && !this.isDisabled) {\n\n      const options: PopoverConfirmOptions = new PopoverConfirmOptions();\n      Object.assign(options, this.defaultOptions, {\n        title: this.title,\n        message: this.message,\n        onConfirm: (): void => {\n          this.onConfirm();\n        },\n        onCancel: (): void => {\n          this.onCancel();\n        },\n        onAfterViewInit: () : void => {\n          this.positionPopover();\n        }\n      });\n\n      const optionalParams: string[] = [\n        'confirmText',\n        'cancelText',\n        'placement',\n        'confirmButtonType',\n        'cancelButtonType',\n        'focusButton',\n        'hideConfirmButton',\n        'hideCancelButton',\n        'popoverClass',\n        'appendToBody',\n        'customTemplate'\n      ];\n      optionalParams.forEach(param => {\n        if (this[param]) {\n          options[param] = this[param];\n        }\n      });\n\n      const componentFactory: ComponentFactory<ConfirmPopover> = this.cfr.resolveComponentFactory(ConfirmPopover);\n      const binding: ResolvedReflectiveProvider[] = ReflectiveInjector.resolve([{\n        provide: PopoverConfirmOptions,\n        useValue: options\n      }]);\n      const contextInjector: Injector = this.viewContainerRef.parentInjector;\n      const childInjector: Injector = ReflectiveInjector.fromResolvedProviders(binding, contextInjector);\n      this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);\n      if (this.appendToBody) {\n        this.renderer.invokeElementMethod(this.document.body, 'appendChild', [this.popover.location.nativeElement]);\n      }\n      this.isOpenChange.emit(true);\n\n    }\n  }\n\n  private positionPopover(): void {\n    if (this.popover) {\n      const popoverElement: HTMLElement = this.popover.location.nativeElement.children[0];\n      const popoverPosition: Coords = this.position.positionElements(\n        this.elm.nativeElement,\n        popoverElement,\n        this.placement || this.defaultOptions.placement,\n        this.appendToBody || this.defaultOptions.appendToBody\n      );\n      this.renderer.setElementStyle(popoverElement, 'top', `${popoverPosition.top}px`);\n      this.renderer.setElementStyle(popoverElement, 'left', `${popoverPosition.left}px`);\n    }\n  }\n\n  private hidePopover(): void {\n    if (this.popover) {\n      this.popover.destroy();\n      this.popover = null;\n      this.isOpenChange.emit(false);\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/confirm.directive.ts","import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  Renderer\n} from '@angular/core';\n\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\n@Directive({\n  selector: '[mwlFocus]'\n})\nexport class Focus implements OnChanges {\n\n  @Input() mwlFocus: boolean;\n\n  constructor(private renderer: Renderer, private elm: ElementRef) {}\n\n  ngOnChanges(changes: any): void {\n    if (changes.mwlFocus && this.mwlFocus === true) {\n      this.renderer.invokeElementMethod(this.elm.nativeElement, 'focus', []);\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/focus.directive.ts","import {Injectable} from '@angular/core';\n\n/**\n * A placeholder token that you need to overwrite with the actual Position service\n *\n * ```\n *  // if not also using the @ng-bootstrap/ng-bootstrap module\n * import {Positioning} from 'angular2-bootstrap-confirm/position';\n *  // if already using the @ng-bootstrap/ng-bootstrap module\n * import {Positioning} from '@ng-bootstrap/ng-bootstrap/util/positioning';\n * import {Position} from 'angular2-bootstrap-confirm';\n *\n * providers: [\n *   provide(Position, {\n *     useClass: Positioning\n *   })\n * ]\n * ```\n */\n@Injectable()\nexport abstract class Position {\n\n  constructor() {\n    throw new Error('You must provide a service that implements the Position when bootstrapping your app.');\n  }\n\n  abstract positionElements(hostEl: any, targetEl: any, positionStr: any, appendToBody: any): any\n\n}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/position.provider.ts","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Confirm} from './confirm.directive';\nimport {ConfirmPopover} from './confirmPopover.component';\nimport {Focus} from './focus.directive';\n\n@NgModule({\n  declarations: [Confirm, ConfirmPopover, Focus],\n  imports: [CommonModule],\n  exports: [Confirm, Focus],\n  entryComponents: [ConfirmPopover]\n})\nexport class ConfirmModule {}\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/confirm.module.ts","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"ng\",\"common\"],\"commonjs\":\"@angular/common\",\"commonjs2\":\"@angular/common\",\"amd\":\"@angular/common\"}\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"root\":[\"ng\",\"platformBrowser\"],\"commonjs\":\"@angular/platform-browser\",\"commonjs2\":\"@angular/platform-browser\",\"amd\":\"@angular/platform-browser\"}\n// module id = 8\n// module chunks = 0","export {ConfirmOptions} from './confirmOptions.provider';\nexport * from './position.provider';\nexport * from './confirm.module';\n\n// Private components, don't import or use these within your app, they are only exported so that AOT can work\nexport {ConfirmPopover as PrivateComponent1} from './confirmPopover.component';\nexport {Focus as PrivateComponent2} from './focus.directive';\nexport {Confirm as PrivateComponent3} from './confirm.directive';\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader?emitErrors=true&failOnHint=true!./src/index.ts"],"sourceRoot":""}