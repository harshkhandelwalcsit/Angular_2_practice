(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@angular/common"), require("@angular/core"), require("@angular/platform-browser"));
	else if(typeof define === 'function' && define.amd)
		define(["@angular/common", "@angular/core", "@angular/platform-browser"], factory);
	else if(typeof exports === 'object')
		exports["ng2BootstrapConfirm"] = factory(require("@angular/common"), require("@angular/core"), require("@angular/platform-browser"));
	else
		root["ng2BootstrapConfirm"] = factory(root["ng"]["common"], root["ng"]["core"], root["ng"]["platformBrowser"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_8__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(0);
/**
 * Use this for configuring the confirmation popover defaults
 *
 * Use it like so:
 * ```
 * const options: ConfirmOptions = new ConfirmOptions();
 * // focus the confirm button by default. See below for an explanation of all options.
 * options.focusButton = 'confirm';
 *
 * providers: [{provide: ConfirmOptions, useValue: options}]
 * ```
 */
var ConfirmOptions = (function () {
    function ConfirmOptions() {
        /**
         * The popover confirmation button text
         */
        this.confirmText = 'Confirm';
        /**
         * The popover cancel button text
         */
        this.cancelText = 'Cancel';
        /**
         * The popover confirm button type e.g. `success`, `danger` etc
         */
        this.confirmButtonType = 'success';
        /**
         * The popover cancel button type  e.g. `success`, `danger` etc
         */
        this.cancelButtonType = 'default';
        /**
         * The popover placement. Can be `top`, `bottom`, `left`, `right`
         */
        this.placement = 'top';
        /**
         * Whether to hide the confirmation button
         */
        this.hideConfirmButton = false;
        /**
         * Whether to hide the cancel button
         */
        this.hideCancelButton = false;
        /**
         * A custom CSS class to be added to the popover
         */
        this.popoverClass = '';
        /**
         * Whether to append the popover to the document body
         */
        this.appendToBody = false;
    }
    ConfirmOptions = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], ConfirmOptions);
    return ConfirmOptions;
}());
exports.ConfirmOptions = ConfirmOptions;
/**
 * @private
 */
var PopoverConfirmOptions = (function (_super) {
    __extends(PopoverConfirmOptions, _super);
    function PopoverConfirmOptions() {
        _super.apply(this, arguments);
    }
    PopoverConfirmOptions = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], PopoverConfirmOptions);
    return PopoverConfirmOptions;
}(ConfirmOptions));
exports.PopoverConfirmOptions = PopoverConfirmOptions;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(0);
var confirmOptions_provider_1 = __webpack_require__(1);
/**
 * @private
 */
var ConfirmPopover = (function () {
    function ConfirmPopover(options) {
        this.options = options;
    }
    ConfirmPopover.prototype.ngAfterViewInit = function () {
        this.options.onAfterViewInit();
    };
    ConfirmPopover = __decorate([
        core_1.Component({
            styles: ["\n    .popover {\n      display: block;\n    }\n  "],
            template: "\n    <template #defaultTemplate let-options=\"options\">\n      <div [class]=\"'popover ' + options.placement + ' popover-' + options.placement + ' ' + options.popoverClass\">\n        <div class=\"popover-arrow arrow\"></div>\n        <h3 class=\"popover-title\" [innerHTML]=\"options.title\"></h3>\n        <div class=\"popover-content\">\n          <p [innerHTML]=\"options.message\"></p>\n          <div class=\"row\">\n            <div\n              class=\"col-xs-6\"\n              [class.col-xs-offset-3]=\"options.hideCancelButton\"\n              *ngIf=\"!options.hideConfirmButton\">\n              <button\n                [mwlFocus]=\"options.focusButton === 'confirm'\"\n                [class]=\"'btn btn-block btn-' + options.confirmButtonType\"\n                (click)=\"options.onConfirm()\"\n                [innerHtml]=\"options.confirmText\">\n              </button>\n            </div>\n            <div\n              class=\"col-xs-6\"\n              [class.col-xs-offset-3]=\"options.hideConfirmButton\"\n              *ngIf=\"!options.hideCancelButton\">\n              <button\n                [mwlFocus]=\"options.focusButton === 'cancel'\"\n                [class]=\"'btn btn-block btn-' + options.cancelButtonType\"\n                (click)=\"options.onCancel()\"\n                [innerHtml]=\"options.cancelText\">\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </template>\n    <template\n      [ngTemplateOutlet]=\"options.customTemplate || defaultTemplate\"\n      [ngOutletContext]=\"{options: options}\">\n    </template>\n  "
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof confirmOptions_provider_1.PopoverConfirmOptions !== 'undefined' && confirmOptions_provider_1.PopoverConfirmOptions) === 'function' && _a) || Object])
    ], ConfirmPopover);
    return ConfirmPopover;
    var _a;
}());
exports.ConfirmPopover = ConfirmPopover;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = __webpack_require__(0);
var platform_browser_1 = __webpack_require__(8);
var confirmPopover_component_1 = __webpack_require__(2);
var confirmOptions_provider_1 = __webpack_require__(1);
var position_provider_1 = __webpack_require__(5);
/**
 * All properties can be set on the directive as attributes like so (use the `ConfirmOptions` provider to configure them globally):
 * ```
 * <button
 *  class="btn btn-default"
 *  mwlConfirm
 *  [title]="title"
 *  [message]="message"
 *  placement="left"
 *  (confirm)="confirmClicked = true"
 *  (cancel)="cancelClicked = true"
 *  [(isOpen)]="isOpen">
 *   Show confirm popover!
 * </button>
 * ```
 */
var Confirm = (function () {
    /**
     * @private
     */
    function Confirm(viewContainerRef, elm, defaultOptions, cfr, position, renderer, document //tslint:disable-line
        ) {
        this.viewContainerRef = viewContainerRef;
        this.elm = elm;
        this.defaultOptions = defaultOptions;
        this.cfr = cfr;
        this.position = position;
        this.renderer = renderer;
        this.document = document;
        /**
         * Whether to hide the confirm button. Default `false`.
         */
        this.hideConfirmButton = false;
        /**
         * Whether to hide the cancel button. Default `false`.
         */
        this.hideCancelButton = false;
        /**
         * Whether to disable showing the popover. Default `false`.
         */
        this.isDisabled = false;
        /**
         * Will open or show the popover when changed.
         * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]="isOpen"`
         */
        this.isOpen = false;
        /**
         * Will emit when the popover is opened or closed
         */
        this.isOpenChange = new core_1.EventEmitter(true);
        /**
         * An expression that is called when the confirm button is clicked.
         */
        this.confirm = new core_1.EventEmitter();
        /**
         * An expression that is called when the cancel button is clicked.
         */
        this.cancel = new core_1.EventEmitter();
        /**
         * Append the element to the document body rather than the trigger element
         */
        this.appendToBody = false;
        /**
         * @private
         */
        this.popover = null;
    }
    /**
     * @private
     */
    Confirm.prototype.ngOnInit = function () {
        this.isOpenChange.emit(false);
    };
    /**
     * @private
     */
    Confirm.prototype.ngOnChanges = function (changes) {
        if (changes.isOpen) {
            if (changes.isOpen.currentValue === true) {
                this.showPopover();
            }
            else {
                this.hidePopover();
            }
        }
    };
    /**
     * @private
     */
    Confirm.prototype.ngOnDestroy = function () {
        this.hidePopover();
    };
    /**
     * @private
     */
    Confirm.prototype.onConfirm = function () {
        this.confirm.emit(null);
        this.hidePopover();
    };
    /**
     * @private
     */
    Confirm.prototype.onCancel = function () {
        this.cancel.emit(null);
        this.hidePopover();
    };
    /**
     * @private
     */
    Confirm.prototype.onDocumentClick = function (target) {
        if (this.popover && !this.elm.nativeElement.contains(target) && !this.popover.location.nativeElement.contains(target)) {
            this.hidePopover();
        }
    };
    /**
     * @private
     */
    Confirm.prototype.togglePopover = function () {
        if (!this.popover) {
            this.showPopover();
        }
        else {
            this.hidePopover();
        }
    };
    /**
     * @private
     */
    Confirm.prototype.onResize = function () {
        this.positionPopover();
    };
    Confirm.prototype.showPopover = function () {
        var _this = this;
        if (!this.popover && !this.isDisabled) {
            var options_1 = new confirmOptions_provider_1.PopoverConfirmOptions();
            Object.assign(options_1, this.defaultOptions, {
                title: this.title,
                message: this.message,
                onConfirm: function () {
                    _this.onConfirm();
                },
                onCancel: function () {
                    _this.onCancel();
                },
                onAfterViewInit: function () {
                    _this.positionPopover();
                }
            });
            var optionalParams = [
                'confirmText',
                'cancelText',
                'placement',
                'confirmButtonType',
                'cancelButtonType',
                'focusButton',
                'hideConfirmButton',
                'hideCancelButton',
                'popoverClass',
                'appendToBody',
                'customTemplate'
            ];
            optionalParams.forEach(function (param) {
                if (_this[param]) {
                    options_1[param] = _this[param];
                }
            });
            var componentFactory = this.cfr.resolveComponentFactory(confirmPopover_component_1.ConfirmPopover);
            var binding = core_1.ReflectiveInjector.resolve([{
                    provide: confirmOptions_provider_1.PopoverConfirmOptions,
                    useValue: options_1
                }]);
            var contextInjector = this.viewContainerRef.parentInjector;
            var childInjector = core_1.ReflectiveInjector.fromResolvedProviders(binding, contextInjector);
            this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);
            if (this.appendToBody) {
                this.renderer.invokeElementMethod(this.document.body, 'appendChild', [this.popover.location.nativeElement]);
            }
            this.isOpenChange.emit(true);
        }
    };
    Confirm.prototype.positionPopover = function () {
        if (this.popover) {
            var popoverElement = this.popover.location.nativeElement.children[0];
            var popoverPosition = this.position.positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);
            this.renderer.setElementStyle(popoverElement, 'top', popoverPosition.top + "px");
            this.renderer.setElementStyle(popoverElement, 'left', popoverPosition.left + "px");
        }
    };
    Confirm.prototype.hidePopover = function () {
        if (this.popover) {
            this.popover.destroy();
            this.popover = null;
            this.isOpenChange.emit(false);
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Confirm.prototype, "title", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Confirm.prototype, "message", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Confirm.prototype, "confirmText", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Confirm.prototype, "cancelText", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Confirm.prototype, "placement", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Confirm.prototype, "confirmButtonType", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Confirm.prototype, "cancelButtonType", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Confirm.prototype, "focusButton", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Confirm.prototype, "hideConfirmButton", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Confirm.prototype, "hideCancelButton", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Confirm.prototype, "isDisabled", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Confirm.prototype, "isOpen", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', (typeof (_a = typeof core_1.TemplateRef !== 'undefined' && core_1.TemplateRef) === 'function' && _a) || Object)
    ], Confirm.prototype, "customTemplate", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
    ], Confirm.prototype, "isOpenChange", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_c = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _c) || Object)
    ], Confirm.prototype, "confirm", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', (typeof (_d = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _d) || Object)
    ], Confirm.prototype, "cancel", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], Confirm.prototype, "popoverClass", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Confirm.prototype, "appendToBody", void 0);
    __decorate([
        core_1.HostListener('document:click', ['$event.target']),
        core_1.HostListener('document:touchend', ['$event.target']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [Object]), 
        __metadata('design:returntype', void 0)
    ], Confirm.prototype, "onDocumentClick", null);
    __decorate([
        core_1.HostListener('click'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], Confirm.prototype, "togglePopover", null);
    __decorate([
        core_1.HostListener('window:resize'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], Confirm.prototype, "onResize", null);
    Confirm = __decorate([
        core_1.Directive({
            selector: '[mwlConfirm]'
        }),
        __param(6, core_1.Inject(platform_browser_1.DOCUMENT)), 
        __metadata('design:paramtypes', [(typeof (_e = typeof core_1.ViewContainerRef !== 'undefined' && core_1.ViewContainerRef) === 'function' && _e) || Object, (typeof (_f = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _f) || Object, (typeof (_g = typeof confirmOptions_provider_1.ConfirmOptions !== 'undefined' && confirmOptions_provider_1.ConfirmOptions) === 'function' && _g) || Object, (typeof (_h = typeof core_1.ComponentFactoryResolver !== 'undefined' && core_1.ComponentFactoryResolver) === 'function' && _h) || Object, (typeof (_j = typeof position_provider_1.Position !== 'undefined' && position_provider_1.Position) === 'function' && _j) || Object, (typeof (_k = typeof core_1.Renderer !== 'undefined' && core_1.Renderer) === 'function' && _k) || Object, Object])
    ], Confirm);
    return Confirm;
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
}());
exports.Confirm = Confirm;


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(0);
/**
 * A helper directive to focus buttons. You will only need this if using a custom template
 */
var Focus = (function () {
    function Focus(renderer, elm) {
        this.renderer = renderer;
        this.elm = elm;
    }
    Focus.prototype.ngOnChanges = function (changes) {
        if (changes.mwlFocus && this.mwlFocus === true) {
            this.renderer.invokeElementMethod(this.elm.nativeElement, 'focus', []);
        }
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], Focus.prototype, "mwlFocus", void 0);
    Focus = __decorate([
        core_1.Directive({
            selector: '[mwlFocus]'
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.Renderer !== 'undefined' && core_1.Renderer) === 'function' && _a) || Object, (typeof (_b = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _b) || Object])
    ], Focus);
    return Focus;
    var _a, _b;
}());
exports.Focus = Focus;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(0);
/**
 * A placeholder token that you need to overwrite with the actual Position service
 *
 * ```
 *  // if not also using the @ng-bootstrap/ng-bootstrap module
 * import {Positioning} from 'angular2-bootstrap-confirm/position';
 *  // if already using the @ng-bootstrap/ng-bootstrap module
 * import {Positioning} from '@ng-bootstrap/ng-bootstrap/util/positioning';
 * import {Position} from 'angular2-bootstrap-confirm';
 *
 * providers: [
 *   provide(Position, {
 *     useClass: Positioning
 *   })
 * ]
 * ```
 */
var Position = (function () {
    function Position() {
        throw new Error('You must provide a service that implements the Position when bootstrapping your app.');
    }
    Position = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Position);
    return Position;
}());
exports.Position = Position;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = __webpack_require__(0);
var common_1 = __webpack_require__(7);
var confirm_directive_1 = __webpack_require__(3);
var confirmPopover_component_1 = __webpack_require__(2);
var focus_directive_1 = __webpack_require__(4);
var ConfirmModule = (function () {
    function ConfirmModule() {
    }
    ConfirmModule = __decorate([
        core_1.NgModule({
            declarations: [confirm_directive_1.Confirm, confirmPopover_component_1.ConfirmPopover, focus_directive_1.Focus],
            imports: [common_1.CommonModule],
            exports: [confirm_directive_1.Confirm, focus_directive_1.Focus],
            entryComponents: [confirmPopover_component_1.ConfirmPopover]
        }), 
        __metadata('design:paramtypes', [])
    ], ConfirmModule);
    return ConfirmModule;
}());
exports.ConfirmModule = ConfirmModule;


/***/ },
/* 7 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ },
/* 8 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var confirmOptions_provider_1 = __webpack_require__(1);
exports.ConfirmOptions = confirmOptions_provider_1.ConfirmOptions;
__export(__webpack_require__(5));
__export(__webpack_require__(6));
// Private components, don't import or use these within your app, they are only exported so that AOT can work
var confirmPopover_component_1 = __webpack_require__(2);
exports.PrivateComponent1 = confirmPopover_component_1.ConfirmPopover;
var focus_directive_1 = __webpack_require__(4);
exports.PrivateComponent2 = focus_directive_1.Focus;
var confirm_directive_1 = __webpack_require__(3);
exports.PrivateComponent3 = confirm_directive_1.Confirm;


/***/ }
/******/ ])
});
;
//# sourceMappingURL=angular2-bootstrap-confirm.js.map